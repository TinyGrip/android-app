buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
    }
}

// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def date = new Date()
def buildTime = date.format("dd.MM.yy", TimeZone.getTimeZone("UTC"))
def buildTimeInternal = date.format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

android {
    compileSdkVersion rootProject.propCompileSdkVersion
    buildToolsVersion rootProject.propBuildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.propMinSdkVersion
        targetSdkVersion rootProject.propTargetSdkVersion

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTimeInternal}\""

        testApplicationId "com.tinygrip.tests"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file("../distribution/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        release {
            storeFile file("../distribution/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev'
            debuggable true
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        internal {
            applicationId 'com.tinygrip.internal'
        }
        production {
            applicationId 'com.tinygrip'
        }
    }


    lintOptions {
        textReport true
        textOutput 'stdout'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }
}

// TODO remove eventually: http://b.android.com/162285
configurations {
    internalDebugCompile
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    wearApp project(':wear')

    compile 'com.google.android.gms:play-services:' + rootProject.depGooglePlayServicesVersion
    compile 'com.android.support:design:' + rootProject.depAndroidSupportVersion
    compile 'com.android.support:support-v4:' + rootProject.depAndroidSupportVersion
    compile 'com.android.support:support-annotations:' + rootProject.depAndroidSupportVersion
    compile 'com.android.support:appcompat-v7:' + rootProject.depAndroidSupportVersion
    compile 'com.android.support:recyclerview-v7:' + rootProject.depAndroidSupportVersion
    compile 'com.android.support:cardview-v7:' + rootProject.depAndroidSupportVersion

    compile 'com.google.dagger:dagger:' + rootProject.depDaggerVersion
    apt 'com.google.dagger:dagger-compiler:' + rootProject.depDaggerCompilerVersion
    provided 'org.glassfish:javax.annotation:' + rootProject.depGlassfishAnnotation

    compile 'com.squareup.okhttp:okhttp:' + rootProject.depOkHttpVersion
    compile 'com.squareup.picasso:picasso:' + rootProject.depPicassoVersion
    compile 'com.squareup.retrofit:retrofit:' + rootProject.depRetrofitVersion
    internalDebugCompile 'com.squareup.retrofit:retrofit-mock:' + rootProject.depRetrofitMockVersion

    compile 'com.jakewharton:butterknife:' + rootProject.depButterKnifeVersion
    compile 'com.jakewharton.timber:timber:' + rootProject.depTimberVersion
    internalDebugCompile 'com.jakewharton.madge:madge:' + rootProject.depMadgeVersion
    internalDebugCompile 'com.jakewharton.scalpel:scalpel:' + rootProject.depScalpelVersion

    compile 'io.reactivex:rxjava:' + rootProject.depRXJavaVersion
    compile 'io.reactivex:rxandroid:' + rootProject.depRXAndroidVersion

    internalCompile 'com.mattprecious.telescope:telescope:' + rootProject.depTelescopeVersion

    // Espresso 2 Dependencies
    androidTestCompile 'com.android.support.test:testing-support-lib:' + rootProject.depTestingSupportLibVersion
    androidTestCompile 'com.android.support.test.espresso:espresso-core:' + rootProject.depEspressoVersionVersion
    androidTestCompile ('com.android.support.test.espresso:espresso-contrib:' + rootProject.depEspressoVersionVersion) {
        exclude module: 'support-annotations'
    }
}

// change apk name
android.applicationVariants.all { variant ->
    for (output in variant.outputs) {
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.apk')) {
            def fileName = "TinyGrip-${output.name}-${buildTime}.apk"
            output.outputFile = new File(outputFile.parent, fileName)
        }
    }
}

// print build finish time
gradle.buildFinished { buildResult ->
    def buildFinishDate = new Date()
    def formattedDate = buildFinishDate.format('yyyy-MM-dd HH:mm:ss')
    println "Build finished: ${formattedDate}"
}
